from random import randint, choice
import requests

class Pokemon:
    pokemons = {}
    
    def __init__(self, pokemon_trainer):
        self.pokemon_trainer = pokemon_trainer   
        self.pokemon_number = randint(1, 1000)
        self.img = self.get_img()
        self.name = self.get_name()
        self.ability = self.get_ability()
        self.height = self.get_height()
        self.weight = self.get_weight()
        self.level = 1
        self.experience = 0
        self.hp = randint(60, 100)  
        self.power = randint(10, 30)  
        self.defense = randint(5, 20)
        Pokemon.pokemons[pokemon_trainer] = self

    def get_img(self):
        url = f'https://pokeapi.co/api/v2/pokemon/{self.pokemon_number}'
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                return data['sprites']['other']['official-artwork']['front_default']
        except:
            pass
        return "https://png.pngtree.com/png-vector/20221125/ourmid/pngtree-no-image-available-icon-flatvector-illustration-pic-design-profile-vector-png-image_40966566.jpg"
    
    def get_name(self):
        url = f'https://pokeapi.co/api/v2/pokemon/{self.pokemon_number}'
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                return data['forms'][0]['name']
        except:
            pass
        return "Pikachu"
    
    def get_ability(self):
        url = f'https://pokeapi.co/api/v2/pokemon/{self.pokemon_number}'
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data['abilities']:
                    return data['abilities'][0]['ability']['name']
        except:
            pass
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"
    
    def get_height(self):
        url = f'https://pokeapi.co/api/v2/pokemon/{self.pokemon_number}'
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                return data['height']
        except:
            pass
        return 0
    
    def get_weight(self):
        url = f'https://pokeapi.co/api/v2/pokemon/{self.pokemon_number}'
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                return data['weight']
        except:
            pass
        return 0

    def attack(self, enemy):
       
        if isinstance(enemy, Wizard):
            chance = randint(1, 5)
            if chance == 1:
                return f" {enemy.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–∞–≥–∏—á–µ—Å–∫–∏–π —â–∏—Ç –∏ —É–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏!"
        
        damage = max(1, self.power - enemy.defense // 2)
        
        if enemy.hp > damage:
            enemy.hp -= damage
            return f" {self.name} –∞—Ç–∞–∫–æ–≤–∞–ª {enemy.name} –∏ –Ω–∞–Ω–µ—Å {damage} —É—Ä–æ–Ω–∞!\n–£ {enemy.name} –æ—Å—Ç–∞–ª–æ—Å—å {enemy.hp} HP"
        else:
            enemy.hp = 0
          
            exp_gain = randint(20, 40)
            level_up = self.add_experience(exp_gain)
            return f"üéâ {self.name} –ø–æ–±–µ–¥–∏–ª {enemy.name}!\n{level_up}"

    def set_name(self, new_name):
        self.name = new_name
        return f"–ò–º—è –ø–æ–∫–µ–º–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {self.name}"

    def set_ability(self, new_ability):
        self.ability = new_ability
        return f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {self.ability}"

    def change_level(self, amount):
        self.level += amount
        if self.level < 1:
            self.level = 1
        return f"–£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω: {self.level}"

    def add_experience(self, exp):
        self.experience += exp
        levels_gained = self.experience // 100
        if levels_gained > 0:
            self.level += levels_gained
            self.experience %= 100
           
            self.hp += levels_gained * 10
            self.power += levels_gained * 3
            self.defense += levels_gained * 2
            return f"–ü–æ–ª—É—á–µ–Ω–æ {exp} –æ–ø—ã—Ç–∞! –ü–æ–≤—ã—à–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ {self.level}!"
        return f"–ü–æ–ª—É—á–µ–Ω–æ {exp} –æ–ø—ã—Ç–∞. –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {self.experience}/100"

    def modify_attack(self, amount):
        self.power += amount
        if self.power < 1:
            self.power = 1
        return f"–ê—Ç–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {self.power}"

    def modify_defense(self, amount):
        self.defense += amount
        if self.defense < 1:
            self.defense = 1
        return f"–ó–∞—â–∏—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {self.defense}"

    def heal(self):
        heal_amount = randint(15, 30)
        self.hp += heal_amount
        max_hp = 60 + (self.level - 1) * 10
        if self.hp > max_hp:
            self.hp = max_hp
        return f" {self.name} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {heal_amount} HP. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {self.hp}/{max_hp} HP"

    def evolve(self):
        old_name = self.name
        self.pokemon_number = randint(1, 1000) 
        self.img = self.get_img()
        self.name = self.get_name()
        self.ability = self.get_ability()
        
        self.level += 3
        self.hp += 20
        self.power += 10
        self.defense += 8
        
        return f" {old_name} —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª –≤ {self.name}! –£—Ä–æ–≤–µ–Ω—å: {self.level}, HP: {self.hp}"

    def rename(self, new_name):
        old_name = self.name
        self.name = new_name
        return f"–ü–æ–∫–µ–º–æ–Ω {old_name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {self.name}"

    def train(self):
        self.power += randint(1, 3)
        self.defense += randint(1, 2)
        exp_gained = randint(5, 15)
        return self.add_experience(exp_gained) + f" –ê—Ç–∞–∫–∞: {self.power}, –ó–∞—â–∏—Ç–∞: {self.defense}"

    def info(self):
        max_hp = 60 + (self.level - 1) * 10
        return (
            f"–ò–º—è: {self.name}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {self.level}\n"
            f"–û–ø—ã—Ç: {self.experience}/100\n"
            f"HP: {self.hp}/{max_hp}\n"
            f"–ê—Ç–∞–∫–∞: {self.power}\n"
            f"–ó–∞—â–∏—Ç–∞: {self.defense}\n"
            f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {self.ability}\n"
            f"–†–æ—Å—Ç: {self.height}\n"
            f"–í–µ—Å: {self.weight}"
        )

    def show_img(self):
        return self.img

    def __str__(self):
        return f"Pokemon({self.name}, Lvl: {self.level}, HP: {self.hp})"


class Wizard(Pokemon):
    def __init__(self, pokemon_trainer):
        super().__init__(pokemon_trainer)
        self.power += 5  
        self.ability = "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —â–∏—Ç"

    def attack(self, enemy):
        # –í–æ–ª—à–µ–±–Ω–∏–∫–∏ –∏–º–µ—é—Ç —à–∞–Ω—Å –Ω–∞ –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω
        chance = randint(1, 4)
        if chance == 1:
            original_power = self.power
            self.power *= 2
            result = super().attack(enemy)
            self.power = original_power
            return result + f" {self.name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –º–∞–≥–∏—á–µ—Å–∫—É—é –∞—Ç–∞–∫—É 2x!"
        return super().attack(enemy)


class Fighter(Pokemon):
    def __init__(self, pokemon_trainer):
        super().__init__(pokemon_trainer)
        self.hp += 20 
        self.ability = "–°—É–ø–µ—Ä-—É–¥–∞—Ä"

    def attack(self, enemy):
       
        super_power = randint(5, 15)
        original_power = self.power
        self.power += super_power
        result = super().attack(enemy)
        self.power = original_power
        
        if "—É–∫–ª–æ–Ω–∏–ª—Å—è" not in result:
            return result + f"–ë–æ–µ—Ü –ø—Ä–∏–º–µ–Ω–∏–ª —Å—É–ø–µ—Ä-—É–¥–∞—Ä —Å–∏–ª–æ–π: +{super_power}"
        return result
